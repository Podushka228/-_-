1)
Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.
Select st.surname,st.name,h.name
From students st,hobbies h


2)
Вывести информацию о студенте, занимающимся хобби самое продолжительное время.
SELECT st.*, extract (year from age(sh.date_finish, sh.date_start)) * 12 
+ extract(month from age(sh.date_finish, sh.date_start)) as prodoljitelnost
FROM students st INNER JOIN students_hobbies sh 
ON st.id = sh.student_id 
INNER JOIN hobbies h 
ON sh.hobby_id = h.id 
WHERE (sh.date_finish is not Null)
order by prodoljitelnost DESC limit 1

3)
Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.
SELECT st.name, st.surname,sh.date_finish, st.birth_date, avg(score), sum(h.risk) 
FROM students st INNER JOIN students_hobbies sh 
ON st.id = sh.student_id 
INNER JOIN hobbies h 
ON sh.hobby_id = h.id 
GROUP BY st.name, st.surname, st.score, st.birth_date,sh.date_finish 
HAVING sum(h.risk) > 0.9 and st.score > (SELECT avg(score) from students)
and sh.date_finish
is null


4)
Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби.
SELECT st.name, st.surname, h.name, sh.date_start, sh.date_finish, extract (year from age(sh.date_finish, sh.date_start)) * 12 
+ extract(month from age(sh.date_finish, sh.date_start))
FROM students st INNER JOIN students_hobbies sh 
ON st.id = sh.student_id 
INNER JOIN hobbies h 
ON sh.hobby_id = h.id 
WHERE (sh.date_finish is not Null)

5)
Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.
Select st.surname,st.name,st.birth_date, extract(year from age(birth_date))
FROM students st
INNER JOIN students_hobbies sh 
ON st.id = sh.student_id 
INNER JOIN hobbies h 
ON sh.hobby_id = h.id 
WHERE (sh.date_finish is not Null)

6)
Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.
SELECT n_group, avg(score)
from students st, students_hobbies sh
WHERE (sh.date_finish is not Null)
GROUP BY n_group 


7)
Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента и номер его группы.
Select h.name, h.risk,st.name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start))
From hobbies h
inner join students st
On st.id=h.id
Inner Join students_hobbies sh
On  h.id=sh.hobby_id  

where (sh.date_finish Is  null)
Order by sh.date_start asc

8)
Найти все хобби, которыми увлекаются студенты, имеющие максимальный балл.
SELECT st.n_group,st.name,st.surname,h.name, max(score)
from students st
inner join students_hobbies sh
ON st.id = sh.student_id 
INNER JOIN hobbies h 
ON sh.hobby_id = h.id 
WHERE (sh.date_finish is not Null)

GROUP BY st.n_group ,st.name,st.surname,h.name
Order by max DESC

9)
Найти все действующие хобби, которыми увлекаются троечники 2-го курса.
Select DISTINCT h.name
from hobbies h inner join students_hobbies sh
on h.id = sh.hobby_id
inner join students st
on sh.student_id = st.id
where score<=4.5
and sh.date_finish is null
and st.n_group::varchar LIKE '2%'

10)
Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.
SELECT DISTINCT substr(st.n_group::varchar,1,1) as n_course
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
WHERE (sh.date_finish is Null)
Group by st.surname, st.name, st.n_group
Having count(sh.hobby_id) > 1


13)
Вывести номер зачётки, фамилию и имя, дату рождения и номер курса для всех отличников, не имеющих хобби. Отсортировать данные по возрастанию в пределах курса по убыванию даты рождения.
Select st.name,st.surname,st.birth_date,st.score
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
where sh.date_finish is not null
and score>4.5 
order by st.birth_date DESC

14)
Создать представление, в котором отображается вся информация о студентах, которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
Create view doing as
Select st.*
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
WHERE sh.date_finish is null and extract (year from age(now()::date, sh.date_start))>=5

15)
Для каждого хобби вывести количество людей, которые им занимаются.
Select count(st.id) as id,h.name
FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
Group by h.name

16)
Вывести ИД самого популярного хобби.
select count(sh.student_id) as id, h.name
from students_hobbies sh inner join hobbies h
on sh.hobby_id = h.id
group by hobby_id, h.name
order by id desc

17)
Вывести всю информацию о студентах, занимающихся самым популярным хобби.
Select h.name, h.risk,st.name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start)) as da
                       FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
order by da DESC limit 10


18)
Вывести ИД 3х хобби с максимальным риском.
select h.risk 
from hobbies h
order by risk  desc
limit 3
19)
Вывести 10 студентов, которые занимаются одним (или несколькими) хобби самое продолжительно время.
Select h.name as hobby_name, h.risk,st.name as student_name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start)) as da
					   FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
order by da DESC limit 10

20)
Вывести номера групп (без повторений), в которых учатся студенты из предыдущего запроса.
Create or replace view number19 as
Select h.name as hobby_name, h.risk,st.name as student_name,st.n_group,extract (year from age(now()::date, sh.date_start)) * 12
                       + extract(month from age(now()::date, sh.date_start)) as da
					   FROM students st inner join students_hobbies sh
on st.id = sh.student_id
inner join hobbies h
on sh.hobby_id = h.id
order by da DESC limit 10



20 продолжение
 select distinct n_group
from number19

21)
Создать представление, которое выводит номер зачетки, имя и фамилию студентов, отсортированных по убыванию среднего балла.
Create view students_1 as
Select st.name,st.surname,avg(score)
FROM students st
Group by st.name,st.surname,score
order by score DESC
22)
Представление: найти каждое популярное хобби на каждом курсе.
WITH c_hobbies AS (
	SELECT substr(st.n_group::varchar, 1, 1) as course, sh.hobby_id, count(*) as c
	FROM students st
	INNER JOIN students_hobbies sh ON st.id = sh.student_id
	GROUP BY substr(st.n_group::varchar, 1, 1), sh.hobby_id
), max_for_course AS (
	SELECT c_h.course, max(c) as max_c
	FROM c_hobbies c_h
	GROUP BY c_h.course
)

SELECT c_h.course, c_h.hobby_id
FROM c_hobbies c_h
INNER JOIN max_for_course mfc ON c_h.course = mfc.course and c_h.c = mfc.max_c



SELECT c_h.course, c_h.hobby_id



30)
Для каждой буквы алфавита в имени найти максимальный и минимальный риск хобби.
Select substr(st.name, 1, 1), max(h.risk), min(h.risk)
From students st
INNER JOIN students_hobbies sh ON st.id = sh.student_id
INNER JOIN hobbies h ON h.id = sh.hobby_id
GROUP BY substr(st.name, 1,1)

